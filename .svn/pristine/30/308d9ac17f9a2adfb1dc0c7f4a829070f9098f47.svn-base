define("dist/dynamicBuild/loader-debug", [ "../main/loader/loader-debug", "../main/motion/motion-debug.js", "../main/base/base-debug.js" ], function(require, exports, module) {
    mo["loader"] = mo["loader"] || require("../main/loader/loader-debug");
});

/**
 * @author AidenXiong
 * @version 1.0
 * @date 2014-09-16
 * @description 图片懒加载
 * @extends mo.Base
 * @name mo.LazyLoad
 * @requires lib/zepto.js
 * @param {HTMLElement} container=window 懒加载的容器 默认
 * @param {object} [opts] 配置参数
 * @param {number} [opts.threshold=0] 距离viewport的值
 * @param {dataAttr} [opts.dataAttr=original] 所有资源加载完成后的回调
 * @example
		var film = new mo.LazyLoad(window, {
			'threshold' : 100,
			'dataAttr'  : 'original'
		});
 * @see lazyLoad/lazyLoad.html
 * @class
*/
define("dist/main/loader/loader-debug", [ "../motion/motion-debug.js", "../base/base-debug.js" ], function(require, exports, module) {
    require("../motion/motion-debug");
    require("../base/base-debug");
    Motion.add("mo.Loader:mo.Base", function() {
        /**
		 * public 作用域
		 * @alias mo.Loader#
		 * @ignore
		 */
        var _public = this;
        var _private = {
            /**
			 * 空函数  什么也不干
			 * @return {[type]} [description]
			 */
            empty: function() {},
            /**
			 * 图片加载
			 * @param  {string}   src 需要加载的图片路径
			 * @param  {Function} fn  加载完图片的回调
			 * @return {undefined}       
			 */
            imgLoader: function(src, fn) {
                var img = new Image();
                img.onload = img.onerror = function() {
                    //加载错误也认为是加载完成
                    fn(src, img);
                    img.onload = null;
                };
                img.src = src;
            },
            /**
			 * 脚本加载
			 * @param  {string}   src 需要加载的脚本路径
			 * @param  {Function} fn  加载完图片的回调
			 * @return {string} charset 脚本编码       
			 */
            jsLoader: function() {
                var firstScript = document.getElementsByTagName("script")[0];
                var scriptHead = firstScript.parentNode;
                var re = /ded|co/;
                var onload = "onload";
                var onreadystatechange = "onreadystatechange";
                var readyState = "readyState";
                return function(src, fn, charset) {
                    charset = charset || "gb2312";
                    var script = document.createElement("script");
                    script.charset = charset;
                    script[onload] = script[onreadystatechange] = function() {
                        if (!this[readyState] || re.test(this[readyState])) {
                            script[onload] = script[onreadystatechange] = null;
                            fn && fn(src, script);
                            script = null;
                        }
                    };
                    script.async = true;
                    script.src = src;
                    scriptHead.insertBefore(script, firstScript);
                };
            }(),
            /**
			 * css样式文件加载
			 * @param  {string}   href 样式文件路径
			 * @param  {Function} fn   加载完成后的回调
			 * @return {undefined}     
			 */
            cssLoader: function(href, fn) {
                var head = document.head || document.getElementsByTagName("head")[0];
                node = document.createElement("link");
                node.rel = "stylesheet";
                node.href = href;
                head.appendChild(node);
                fn && fn(href, node);
            },
            /**
			 * [description]
			 * @param  {string}   src 音频文件路径
			 * @param  {Function} fn  加载完成的回调
			 * @return {undefined}    
			 */
            audioLoader: function(src, fn) {
                var aud = new Audio();
                $(aud).bind("canplaythrough", function() {
                    // totally loaded
                    fn(src, aud);
                });
                aud.src = src;
                aud.load();
            },
            /**
			 * 根据url获取扩展名
			 * @param  {string} url url路径
			 * @return {string}     扩展名
			 */
            getExt: function(url) {
                return url.match(/\.([^\.]*)$/)[0].substr(1).match(/^[a-zA-Z0-9]+/)[0];
            },
            /**
			 * 根据url获取资源类型
			 * @param  {string} url 文件路径
			 * @return {string}     文件类型
			 */
            getType: function(url) {
                var ext = _private.getExt(url);
                var types = {
                    img: [ "png", "jpg", "gif" ],
                    css: [ "css" ],
                    js: [ "js" ],
                    audio: [ "mp3", "ogg", "wav" ]
                };
                for (var k in types) {
                    if (types[k].indexOf(ext) > -1) {
                        return k;
                    }
                }
                return false;
            }
        };
        /**
		 * public static作用域
		 * @alias mo.Loader.
		 * @ignore
		 */
        var _static = this.constructor;
        _public.constructor = function(res, config) {
            if (!res) {
                return;
            }
            this.init(res, config);
        };
        // 插件默认配置
        _static.config = {
            onLoading: _private.empty,
            onComplete: _private.empty,
            dataAttr: "preload"
        };
        /***
		 * 初始化
		 * @description 参数处理
		 */
        _public.init = function(res, config) {
            var _self = this;
            if (typeof config == "function") {
                var tempFunc = config;
                config = {
                    onComplete: tempFunc
                };
            }
            _self.config = Zepto.extend(true, {}, _static.config, config);
            // 参数接收
            var config = _self.config;
            res = [].concat(res);
            var resourceCache = {};
            //获取页面上配置了预加载的节点
            var resDom = Array.prototype.slice.call(document.querySelectorAll("[data-" + config.dataAttr + "]"));
            Zepto(resDom).each(function(index, el) {
                var _el = Zepto(el);
                var attr = _el.attr("data-" + config.dataAttr);
                if (resourceCache[attr]) {
                    resourceCache[attr].push(el);
                } else {
                    resourceCache[attr] = [ el ];
                    res.indexOf(attr) < 0 && res.push(attr);
                }
            });
            config.event && _self.on(config.event);
            var len = res.length, loaded = 0;
            var sTime = new Date().getTime();
            var replaceSrc = function(src) {
                if (resourceCache[src]) {
                    //是从节点上提取到的预加载数据
                    Zepto.each(resourceCache[src], function(index, dom) {
                        dom.removeAttribute("data-" + config.dataAttr);
                        var tagName = dom.tagName.toLowerCase();
                        switch (tagName) {
                          case "link":
                            //css文件节点
                            dom.href = src;
                            break;

                          case "img":
                          case "script":
                          case "video":
                            dom.src = src;
                            break;

                          default:
                            dom.style.backgroundImage = "url(" + src + ")";
                        }
                    });
                }
            };
            var load = function(src, node) {
                config.onLoading(++loaded, len, src, node);
                /**
				 * @event mo.Loader#loading
				 * @property {object} event 单个资源加载完成
				 */
                _self.trigger("loading", [ loaded, len, src, node ]);
                replaceSrc(src);
                if (loaded == len) {
                    //加载完成
                    var times = new Date().getTime() - sTime;
                    config.onComplete(times);
                    /**
					 * @event mo.Loader#complete
					 * @property {object} event 所有资源加载完成
					 */
                    _self.trigger("complete", [ times ]);
                }
            };
            Zepto.each(res, function(index, item) {
                _private.getType(item);
                var type = _private.getType(item);
                var callFunc = _private[type + "Loader"];
                if (callFunc === undefined) {
                    //不支持的类型默认认为是加载了
                    load(item);
                } else {
                    callFunc(item, load);
                }
            });
        };
    });
});

/**
 * @author Brucewan
 * @version 1.0
 * @date 2014-06-13
 * @description tg核心功能
 * @example
		var tab1 = new mo.Tab({
			target: $('#slide01 li')
		}); 
 * @name mo
 * @namespace
 */
define("dist/main/motion/motion-debug", [], function(require, exports, module) {
    var Motion = /** @lends mo */ {
        /**
		 * tg版本号
		 * @type {string}
		 */
        version: "1.1",
        /**
		 * 命令空间管理 eg. Motion.add('mo.Slide:mo.Tab', function(){})
		 * @param {string} name 
		 * @param {object} obj 
		 */
        add: function(name, obj) {
            var target = window;
            var me = arguments.callee;
            var parent = null;
            var isMatch = /^([\w\.]+)(?:\:([\w\.]+))?\s*$/.test(name);
            var objNS = RegExp.$1.split(".");
            var parentNS = RegExp.$2.split(".");
            var name = objNS.pop();
            var isClass = /[A-Z]/.test(name.substr(0, 1));
            var constructor = function() {
                var mainFn = arguments.callee.prototype.init;
                if (typeof mainFn == "function" && arguments.callee.caller != me) {
                    mainFn && mainFn.apply(this, arguments);
                }
            };
            for (var i = 0; i < objNS.length; i++) {
                var p = objNS[i];
                target = target[p] || (target[p] = {});
            }
            if (parentNS[0] != "") {
                parent = window;
                for (var i = 0; i < parentNS.length; i++) {
                    parent = parent[parentNS[i]];
                    if (!parent) {
                        parent = null;
                        break;
                    }
                }
            }
            if (isClass && typeof obj == "function") {
                if (parent) {
                    constructor.prototype = new parent();
                    constructor.prototype.superClass = parent;
                }
                target[name] = constructor;
                constructor.prototype.constructor = constructor;
                obj.call(target[name].prototype);
            } else {
                target[name] = obj;
            }
        }
    };
    window.Motion = window.mo = Motion;
});

/**
 * @version 1.0
 * @date 2014-06-15
 * @description mo
 * @name mo
 * @namespace
*/
/**
 * @author Brucewan
 * @version 1.0
 * @date 2014-06-18
 * @description 基础类
 * @name mo.Base
 * @class
*/
define("dist/main/base/base-debug", [ "../motion/motion-debug.js" ], function(require, exports, module) {
    require("../motion/motion-debug");
    Motion.add("mo.Base", function() {
        /**
		 * public 作用域
		 * @alias mo.Base#
		 * @ignore
		 */
        var _public = this;
        /**
		 * public static作用域
		 * @alias mo.Base.
		 * @ignore
		 */
        var _static = this.constructor;
        /**
		 * private static作用域
		 * @alias mo.Base~
		 * @ignore
		 */
        var _self = {};
        /**
		 * 构造函数
		 */
        _public.constructor = function() {
            // private作用域
            var _private = {};
        };
        /**
		 * 绑定事件
		 */
        _public.on = function(name, fn) {
            box = Zepto(this);
            return box.on.apply(box, arguments);
        };
        /**
		 * 触发事件
		 */
        _public.trigger = function(name, data) {
            var box = Zepto(this);
            return box.triggerHandler.apply(box, arguments);
        };
    });
});
