define("dist/resource/exif-debug", [], function(require) {
    /*
	 * Javascript EXIF Reader 0.1.4
	 * Copyright (c) 2008 Jacob Seidelin, cupboy@gmail.com, http://blog.nihilogic.dk/
	 * Licensed under the MPL License [http://www.nihilogic.dk/licenses/mpl-license.txt]
	 */
    window.EXIF = {};
    (function() {
        var bDebug = false;
        EXIF.Tags = {
            // version tags
            36864: "ExifVersion",
            // EXIF version
            40960: "FlashpixVersion",
            // Flashpix format version
            // colorspace tags
            40961: "ColorSpace",
            // Color space information tag
            // image configuration
            40962: "PixelXDimension",
            // Valid width of meaningful image
            40963: "PixelYDimension",
            // Valid height of meaningful image
            37121: "ComponentsConfiguration",
            // Information about channels
            37122: "CompressedBitsPerPixel",
            // Compressed bits per pixel
            // user information
            37500: "MakerNote",
            // Any desired information written by the manufacturer
            37510: "UserComment",
            // Comments by user
            // related file
            40964: "RelatedSoundFile",
            // Name of related sound file
            // date and time
            36867: "DateTimeOriginal",
            // Date and time when the original image was generated
            36868: "DateTimeDigitized",
            // Date and time when the image was stored digitally
            37520: "SubsecTime",
            // Fractions of seconds for DateTime
            37521: "SubsecTimeOriginal",
            // Fractions of seconds for DateTimeOriginal
            37522: "SubsecTimeDigitized",
            // Fractions of seconds for DateTimeDigitized
            // picture-taking conditions
            33434: "ExposureTime",
            // Exposure time (in seconds)
            33437: "FNumber",
            // F number
            34850: "ExposureProgram",
            // Exposure program
            34852: "SpectralSensitivity",
            // Spectral sensitivity
            34855: "ISOSpeedRatings",
            // ISO speed rating
            34856: "OECF",
            // Optoelectric conversion factor
            37377: "ShutterSpeedValue",
            // Shutter speed
            37378: "ApertureValue",
            // Lens aperture
            37379: "BrightnessValue",
            // Value of brightness
            37380: "ExposureBias",
            // Exposure bias
            37381: "MaxApertureValue",
            // Smallest F number of lens
            37382: "SubjectDistance",
            // Distance to subject in meters
            37383: "MeteringMode",
            // Metering mode
            37384: "LightSource",
            // Kind of light source
            37385: "Flash",
            // Flash status
            37396: "SubjectArea",
            // Location and area of main subject
            37386: "FocalLength",
            // Focal length of the lens in mm
            41483: "FlashEnergy",
            // Strobe energy in BCPS
            41484: "SpatialFrequencyResponse",
            // 
            41486: "FocalPlaneXResolution",
            // Number of pixels in width direction per FocalPlaneResolutionUnit
            41487: "FocalPlaneYResolution",
            // Number of pixels in height direction per FocalPlaneResolutionUnit
            41488: "FocalPlaneResolutionUnit",
            // Unit for measuring FocalPlaneXResolution and FocalPlaneYResolution
            41492: "SubjectLocation",
            // Location of subject in image
            41493: "ExposureIndex",
            // Exposure index selected on camera
            41495: "SensingMethod",
            // Image sensor type
            41728: "FileSource",
            // Image source (3 == DSC)
            41729: "SceneType",
            // Scene type (1 == directly photographed)
            41730: "CFAPattern",
            // Color filter array geometric pattern
            41985: "CustomRendered",
            // Special processing
            41986: "ExposureMode",
            // Exposure mode
            41987: "WhiteBalance",
            // 1 = auto white balance, 2 = manual
            41988: "DigitalZoomRation",
            // Digital zoom ratio
            41989: "FocalLengthIn35mmFilm",
            // Equivalent foacl length assuming 35mm film camera (in mm)
            41990: "SceneCaptureType",
            // Type of scene
            41991: "GainControl",
            // Degree of overall image gain adjustment
            41992: "Contrast",
            // Direction of contrast processing applied by camera
            41993: "Saturation",
            // Direction of saturation processing applied by camera
            41994: "Sharpness",
            // Direction of sharpness processing applied by camera
            41995: "DeviceSettingDescription",
            // 
            41996: "SubjectDistanceRange",
            // Distance to subject
            // other tags
            40965: "InteroperabilityIFDPointer",
            42016: "ImageUniqueID"
        };
        EXIF.TiffTags = {
            256: "ImageWidth",
            257: "ImageHeight",
            34665: "ExifIFDPointer",
            34853: "GPSInfoIFDPointer",
            40965: "InteroperabilityIFDPointer",
            258: "BitsPerSample",
            259: "Compression",
            262: "PhotometricInterpretation",
            274: "Orientation",
            277: "SamplesPerPixel",
            284: "PlanarConfiguration",
            530: "YCbCrSubSampling",
            531: "YCbCrPositioning",
            282: "XResolution",
            283: "YResolution",
            296: "ResolutionUnit",
            273: "StripOffsets",
            278: "RowsPerStrip",
            279: "StripByteCounts",
            513: "JPEGInterchangeFormat",
            514: "JPEGInterchangeFormatLength",
            301: "TransferFunction",
            318: "WhitePoint",
            319: "PrimaryChromaticities",
            529: "YCbCrCoefficients",
            532: "ReferenceBlackWhite",
            306: "DateTime",
            270: "ImageDescription",
            271: "Make",
            272: "Model",
            305: "Software",
            315: "Artist",
            33432: "Copyright"
        };
        EXIF.GPSTags = {
            0: "GPSVersionID",
            1: "GPSLatitudeRef",
            2: "GPSLatitude",
            3: "GPSLongitudeRef",
            4: "GPSLongitude",
            5: "GPSAltitudeRef",
            6: "GPSAltitude",
            7: "GPSTimeStamp",
            8: "GPSSatellites",
            9: "GPSStatus",
            10: "GPSMeasureMode",
            11: "GPSDOP",
            12: "GPSSpeedRef",
            13: "GPSSpeed",
            14: "GPSTrackRef",
            15: "GPSTrack",
            16: "GPSImgDirectionRef",
            17: "GPSImgDirection",
            18: "GPSMapDatum",
            19: "GPSDestLatitudeRef",
            20: "GPSDestLatitude",
            21: "GPSDestLongitudeRef",
            22: "GPSDestLongitude",
            23: "GPSDestBearingRef",
            24: "GPSDestBearing",
            25: "GPSDestDistanceRef",
            26: "GPSDestDistance",
            27: "GPSProcessingMethod",
            28: "GPSAreaInformation",
            29: "GPSDateStamp",
            30: "GPSDifferential"
        };
        EXIF.StringValues = {
            ExposureProgram: {
                0: "Not defined",
                1: "Manual",
                2: "Normal program",
                3: "Aperture priority",
                4: "Shutter priority",
                5: "Creative program",
                6: "Action program",
                7: "Portrait mode",
                8: "Landscape mode"
            },
            MeteringMode: {
                0: "Unknown",
                1: "Average",
                2: "CenterWeightedAverage",
                3: "Spot",
                4: "MultiSpot",
                5: "Pattern",
                6: "Partial",
                255: "Other"
            },
            LightSource: {
                0: "Unknown",
                1: "Daylight",
                2: "Fluorescent",
                3: "Tungsten (incandescent light)",
                4: "Flash",
                9: "Fine weather",
                10: "Cloudy weather",
                11: "Shade",
                12: "Daylight fluorescent (D 5700 - 7100K)",
                13: "Day white fluorescent (N 4600 - 5400K)",
                14: "Cool white fluorescent (W 3900 - 4500K)",
                15: "White fluorescent (WW 3200 - 3700K)",
                17: "Standard light A",
                18: "Standard light B",
                19: "Standard light C",
                20: "D55",
                21: "D65",
                22: "D75",
                23: "D50",
                24: "ISO studio tungsten",
                255: "Other"
            },
            Flash: {
                0: "Flash did not fire",
                1: "Flash fired",
                5: "Strobe return light not detected",
                7: "Strobe return light detected",
                9: "Flash fired, compulsory flash mode",
                13: "Flash fired, compulsory flash mode, return light not detected",
                15: "Flash fired, compulsory flash mode, return light detected",
                16: "Flash did not fire, compulsory flash mode",
                24: "Flash did not fire, auto mode",
                25: "Flash fired, auto mode",
                29: "Flash fired, auto mode, return light not detected",
                31: "Flash fired, auto mode, return light detected",
                32: "No flash function",
                65: "Flash fired, red-eye reduction mode",
                69: "Flash fired, red-eye reduction mode, return light not detected",
                71: "Flash fired, red-eye reduction mode, return light detected",
                73: "Flash fired, compulsory flash mode, red-eye reduction mode",
                77: "Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected",
                79: "Flash fired, compulsory flash mode, red-eye reduction mode, return light detected",
                89: "Flash fired, auto mode, red-eye reduction mode",
                93: "Flash fired, auto mode, return light not detected, red-eye reduction mode",
                95: "Flash fired, auto mode, return light detected, red-eye reduction mode"
            },
            SensingMethod: {
                1: "Not defined",
                2: "One-chip color area sensor",
                3: "Two-chip color area sensor",
                4: "Three-chip color area sensor",
                5: "Color sequential area sensor",
                7: "Trilinear sensor",
                8: "Color sequential linear sensor"
            },
            SceneCaptureType: {
                0: "Standard",
                1: "Landscape",
                2: "Portrait",
                3: "Night scene"
            },
            SceneType: {
                1: "Directly photographed"
            },
            CustomRendered: {
                0: "Normal process",
                1: "Custom process"
            },
            WhiteBalance: {
                0: "Auto white balance",
                1: "Manual white balance"
            },
            GainControl: {
                0: "None",
                1: "Low gain up",
                2: "High gain up",
                3: "Low gain down",
                4: "High gain down"
            },
            Contrast: {
                0: "Normal",
                1: "Soft",
                2: "Hard"
            },
            Saturation: {
                0: "Normal",
                1: "Low saturation",
                2: "High saturation"
            },
            Sharpness: {
                0: "Normal",
                1: "Soft",
                2: "Hard"
            },
            SubjectDistanceRange: {
                0: "Unknown",
                1: "Macro",
                2: "Close view",
                3: "Distant view"
            },
            FileSource: {
                3: "DSC"
            },
            Components: {
                0: "",
                1: "Y",
                2: "Cb",
                3: "Cr",
                4: "R",
                5: "G",
                6: "B"
            }
        };
        function addEvent(oElement, strEvent, fncHandler) {
            if (oElement.addEventListener) {
                oElement.addEventListener(strEvent, fncHandler, false);
            } else if (oElement.attachEvent) {
                oElement.attachEvent("on" + strEvent, fncHandler);
            }
        }
        function imageHasData(oImg) {
            return !!oImg.exifdata;
        }
        function getImageData(oImg, fncCallback) {
            BinaryAjax(oImg.src, function(oHTTP) {
                var oEXIF = findEXIFinJPEG(oHTTP.binaryResponse);
                oImg.exifdata = oEXIF || {};
                if (fncCallback) fncCallback();
            });
        }
        function findEXIFinJPEG(oFile) {
            var aMarkers = [];
            if (oFile.getByteAt(0) != 255 || oFile.getByteAt(1) != 216) {
                return false;
            }
            var iOffset = 2;
            var iLength = oFile.getLength();
            while (iOffset < iLength) {
                if (oFile.getByteAt(iOffset) != 255) {
                    if (bDebug) console.log("Not a valid marker at offset " + iOffset + ", found: " + oFile.getByteAt(iOffset));
                    return false;
                }
                var iMarker = oFile.getByteAt(iOffset + 1);
                // we could implement handling for other markers here, 
                // but we're only looking for 0xFFE1 for EXIF data
                if (iMarker == 22400) {
                    if (bDebug) console.log("Found 0xFFE1 marker");
                    return readEXIFData(oFile, iOffset + 4, oFile.getShortAt(iOffset + 2, true) - 2);
                    iOffset += 2 + oFile.getShortAt(iOffset + 2, true);
                } else if (iMarker == 225) {
                    // 0xE1 = Application-specific 1 (for EXIF)
                    if (bDebug) console.log("Found 0xFFE1 marker");
                    return readEXIFData(oFile, iOffset + 4, oFile.getShortAt(iOffset + 2, true) - 2);
                } else {
                    iOffset += 2 + oFile.getShortAt(iOffset + 2, true);
                }
            }
        }
        function readTags(oFile, iTIFFStart, iDirStart, oStrings, bBigEnd) {
            var iEntries = oFile.getShortAt(iDirStart, bBigEnd);
            var oTags = {};
            for (var i = 0; i < iEntries; i++) {
                var iEntryOffset = iDirStart + i * 12 + 2;
                var strTag = oStrings[oFile.getShortAt(iEntryOffset, bBigEnd)];
                if (!strTag && bDebug) console.log("Unknown tag: " + oFile.getShortAt(iEntryOffset, bBigEnd));
                oTags[strTag] = readTagValue(oFile, iEntryOffset, iTIFFStart, iDirStart, bBigEnd);
            }
            return oTags;
        }
        function readTagValue(oFile, iEntryOffset, iTIFFStart, iDirStart, bBigEnd) {
            var iType = oFile.getShortAt(iEntryOffset + 2, bBigEnd);
            var iNumValues = oFile.getLongAt(iEntryOffset + 4, bBigEnd);
            var iValueOffset = oFile.getLongAt(iEntryOffset + 8, bBigEnd) + iTIFFStart;
            switch (iType) {
              case 1:
              // byte, 8-bit unsigned int
                case 7:
                // undefined, 8-bit byte, value depending on field
                if (iNumValues == 1) {
                    return oFile.getByteAt(iEntryOffset + 8, bBigEnd);
                } else {
                    var iValOffset = iNumValues > 4 ? iValueOffset : iEntryOffset + 8;
                    var aVals = [];
                    for (var n = 0; n < iNumValues; n++) {
                        aVals[n] = oFile.getByteAt(iValOffset + n);
                    }
                    return aVals;
                }
                break;

              case 2:
                // ascii, 8-bit byte
                var iStringOffset = iNumValues > 4 ? iValueOffset : iEntryOffset + 8;
                return oFile.getStringAt(iStringOffset, iNumValues - 1);
                break;

              case 3:
                // short, 16 bit int
                if (iNumValues == 1) {
                    return oFile.getShortAt(iEntryOffset + 8, bBigEnd);
                } else {
                    var iValOffset = iNumValues > 2 ? iValueOffset : iEntryOffset + 8;
                    var aVals = [];
                    for (var n = 0; n < iNumValues; n++) {
                        aVals[n] = oFile.getShortAt(iValOffset + 2 * n, bBigEnd);
                    }
                    return aVals;
                }
                break;

              case 4:
                // long, 32 bit int
                if (iNumValues == 1) {
                    return oFile.getLongAt(iEntryOffset + 8, bBigEnd);
                } else {
                    var aVals = [];
                    for (var n = 0; n < iNumValues; n++) {
                        aVals[n] = oFile.getLongAt(iValueOffset + 4 * n, bBigEnd);
                    }
                    return aVals;
                }
                break;

              case 5:
                // rational = two long values, first is numerator, second is denominator
                if (iNumValues == 1) {
                    return oFile.getLongAt(iValueOffset, bBigEnd) / oFile.getLongAt(iValueOffset + 4, bBigEnd);
                } else {
                    var aVals = [];
                    for (var n = 0; n < iNumValues; n++) {
                        aVals[n] = oFile.getLongAt(iValueOffset + 8 * n, bBigEnd) / oFile.getLongAt(iValueOffset + 4 + 8 * n, bBigEnd);
                    }
                    return aVals;
                }
                break;

              case 9:
                // slong, 32 bit signed int
                if (iNumValues == 1) {
                    return oFile.getSLongAt(iEntryOffset + 8, bBigEnd);
                } else {
                    var aVals = [];
                    for (var n = 0; n < iNumValues; n++) {
                        aVals[n] = oFile.getSLongAt(iValueOffset + 4 * n, bBigEnd);
                    }
                    return aVals;
                }
                break;

              case 10:
                // signed rational, two slongs, first is numerator, second is denominator
                if (iNumValues == 1) {
                    return oFile.getSLongAt(iValueOffset, bBigEnd) / oFile.getSLongAt(iValueOffset + 4, bBigEnd);
                } else {
                    var aVals = [];
                    for (var n = 0; n < iNumValues; n++) {
                        aVals[n] = oFile.getSLongAt(iValueOffset + 8 * n, bBigEnd) / oFile.getSLongAt(iValueOffset + 4 + 8 * n, bBigEnd);
                    }
                    return aVals;
                }
                break;
            }
        }
        function readEXIFData(oFile, iStart, iLength) {
            if (oFile.getStringAt(iStart, 4) != "Exif") {
                if (bDebug) console.log("Not valid EXIF data! " + oFile.getStringAt(iStart, 4));
                return false;
            }
            var bBigEnd;
            var iTIFFOffset = iStart + 6;
            // test for TIFF validity and endianness
            if (oFile.getShortAt(iTIFFOffset) == 18761) {
                bBigEnd = false;
            } else if (oFile.getShortAt(iTIFFOffset) == 19789) {
                bBigEnd = true;
            } else {
                if (bDebug) console.log("Not valid TIFF data! (no 0x4949 or 0x4D4D)");
                return false;
            }
            if (oFile.getShortAt(iTIFFOffset + 2, bBigEnd) != 42) {
                if (bDebug) console.log("Not valid TIFF data! (no 0x002A)");
                return false;
            }
            if (oFile.getLongAt(iTIFFOffset + 4, bBigEnd) != 8) {
                if (bDebug) console.log("Not valid TIFF data! (First offset not 8)", oFile.getShortAt(iTIFFOffset + 4, bBigEnd));
                return false;
            }
            var oTags = readTags(oFile, iTIFFOffset, iTIFFOffset + 8, EXIF.TiffTags, bBigEnd);
            if (oTags.ExifIFDPointer) {
                var oEXIFTags = readTags(oFile, iTIFFOffset, iTIFFOffset + oTags.ExifIFDPointer, EXIF.Tags, bBigEnd);
                for (var strTag in oEXIFTags) {
                    switch (strTag) {
                      case "LightSource":
                      case "Flash":
                      case "MeteringMode":
                      case "ExposureProgram":
                      case "SensingMethod":
                      case "SceneCaptureType":
                      case "SceneType":
                      case "CustomRendered":
                      case "WhiteBalance":
                      case "GainControl":
                      case "Contrast":
                      case "Saturation":
                      case "Sharpness":
                      case "SubjectDistanceRange":
                      case "FileSource":
                        oEXIFTags[strTag] = EXIF.StringValues[strTag][oEXIFTags[strTag]];
                        break;

                      case "ExifVersion":
                      case "FlashpixVersion":
                        oEXIFTags[strTag] = String.fromCharCode(oEXIFTags[strTag][0], oEXIFTags[strTag][1], oEXIFTags[strTag][2], oEXIFTags[strTag][3]);
                        break;

                      case "ComponentsConfiguration":
                        oEXIFTags[strTag] = EXIF.StringValues.Components[oEXIFTags[strTag][0]] + EXIF.StringValues.Components[oEXIFTags[strTag][1]] + EXIF.StringValues.Components[oEXIFTags[strTag][2]] + EXIF.StringValues.Components[oEXIFTags[strTag][3]];
                        break;
                    }
                    oTags[strTag] = oEXIFTags[strTag];
                }
            }
            if (oTags.GPSInfoIFDPointer) {
                var oGPSTags = readTags(oFile, iTIFFOffset, iTIFFOffset + oTags.GPSInfoIFDPointer, EXIF.GPSTags, bBigEnd);
                for (var strTag in oGPSTags) {
                    switch (strTag) {
                      case "GPSVersionID":
                        oGPSTags[strTag] = oGPSTags[strTag][0] + "." + oGPSTags[strTag][1] + "." + oGPSTags[strTag][2] + "." + oGPSTags[strTag][3];
                        break;
                    }
                    oTags[strTag] = oGPSTags[strTag];
                }
            }
            return oTags;
        }
        EXIF.getData = function(oImg, fncCallback) {
            if (!oImg.complete) return false;
            if (!imageHasData(oImg)) {
                getImageData(oImg, fncCallback);
            } else {
                if (fncCallback) fncCallback();
            }
            return true;
        };
        EXIF.getTag = function(oImg, strTag) {
            if (!imageHasData(oImg)) return;
            return oImg.exifdata[strTag];
        };
        EXIF.getAllTags = function(oImg) {
            if (!imageHasData(oImg)) return {};
            var oData = oImg.exifdata;
            var oAllTags = {};
            for (var a in oData) {
                if (oData.hasOwnProperty(a)) {
                    oAllTags[a] = oData[a];
                }
            }
            return oAllTags;
        };
        EXIF.pretty = function(oImg) {
            if (!imageHasData(oImg)) return "";
            var oData = oImg.exifdata;
            var strPretty = "";
            for (var a in oData) {
                if (oData.hasOwnProperty(a)) {
                    if (typeof oData[a] == "object") {
                        strPretty += a + " : [" + oData[a].length + " values]\r\n";
                    } else {
                        strPretty += a + " : " + oData[a] + "\r\n";
                    }
                }
            }
            return strPretty;
        };
        EXIF.readFromBinaryFile = function(oFile) {
            return findEXIFinJPEG(oFile);
        };
        function loadAllImages() {
            var aImages = document.getElementsByTagName("img");
            for (var i = 0; i < aImages.length; i++) {
                if (aImages[i].getAttribute("exif") == "true") {
                    if (!aImages[i].complete) {
                        addEvent(aImages[i], "load", function() {
                            EXIF.getData(this);
                        });
                    } else {
                        EXIF.getData(aImages[i]);
                    }
                }
            }
        }
        addEvent(window, "load", loadAllImages);
    })();
});